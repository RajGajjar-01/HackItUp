// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  password     String
  name         String
  role         String      @default("owner") // owner, manager, staff
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Restaurant {
  id             String          @id @default(uuid())
  name           String
  address        String?
  phone          String?
  users          User[]
  inventoryItems InventoryItem[]
  wasteRecords   WasteRecord[]
  salesData      SalesData[]
  recipes        Recipe[]
  menus          Menu[] // Added this relation
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model InventoryItem {
  id            String        @id @default(uuid())
  name          String
  category      String
  quantity      Float
  minQuantity   Float         @default(0)
  unit          String
  flag          Boolean
  purchaseDate  DateTime      @default(now())
  expiryDate    DateTime?
  imageUrl      String?
  cost          Float
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  wasteRecords  WasteRecord[]
  usedInRecipes RecipeItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model WasteRecord {
  id              String        @id @default(uuid())
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  quantity        Float
  reason          String
  imageUrl        String?
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SalesData {
  id           String     @id @default(uuid())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     String
  quantitySold Int
  revenue      Float
  date         DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Recipe {
  id           String       @id @default(uuid())
  name         String
  description  String?
  category     String
  price        Float
  ingredients  RecipeItem[]
  imageUrl     String?
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String
  salesData    SalesData[]
  isSpecial    Boolean      @default(false)
  menus        MenuItems[] // Added this relation
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model RecipeItem {
  id              String        @id @default(uuid())
  recipe          Recipe        @relation(fields: [recipeId], references: [id])
  recipeId        String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  quantity        Float
  unit            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// New models for Menu functionality
model Menu {
  id           String      @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean     @default(true)
  items        MenuItems[]
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model MenuItems {
  id        String   @id @default(uuid())
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String
  section   String? // e.g., "Appetizer", "Main Course", "Dessert"
  order     Int      @default(0) // For controlling display order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([menuId, recipeId])
}
